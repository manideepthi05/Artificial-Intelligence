class MapColoring:
    def __init__(self, graph, colors):
        self.graph = graph
        self.colors = colors
        self.assignment = {}

    def is_safe(self, node, color):
        for neighbor in self.graph[node]:
            if neighbor in self.assignment and self.assignment[neighbor] == color:
                return False
        return True

    def backtrack(self, node):
        if node == len(self.graph):
            return True
        
        for color in self.colors:
            if self.is_safe(node, color):
                self.assignment[node] = color
                if self.backtrack(node + 1):
                    return True
                del self.assignment[node]
        return False

    def solve(self):
        if self.backtrack(0):
            return self.assignment
        else:
            return "No solution exists"

# Example usage
graph = {
    0: [1, 2],
    1: [0, 2, 3],
    2: [0, 1],
    3: [1]
}
colors = ['Red', 'Green', 'Blue']
map_coloring = MapColoring(graph, colors)
solution = map_coloring.solve()
print(solution)
